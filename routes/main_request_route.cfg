/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	# pike_check_req will return True / 1 if a source IP is allowed
	# if not, exit as the source is thought to be flooding traffic.
	if (!pike_check_req()) { 
		exit; 
	}

	# per request initial checks
	route(REQINIT);

	# sachin
	route(SET_DIRECTION_FLAG);
	route(SET_SOCKET);
	

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# Manage RTP
	route(SET_RTP_REQUEST);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# authentication
	# route(AUTH);

	# sachin
	# route(REMOVE_CODECS_INBOUND);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		route(SET_CDR_VARS);
		setflag(FLT_ACC); # do accounting
		setflag(FLT_DLG); # store CDR
	}

	

	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);


	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations to PSTN
	# route(PSTN);

	# user location service
	route(LOCATION);

	return;
}

